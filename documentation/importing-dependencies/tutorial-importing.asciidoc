---
title: Importing HTML and JavaScript
order: 3
layout: page
---

= Importing HTML and JavaScript

You can add HTML and JavaScript to your Java classes. 
 
There are two ways to add HTML and JavaScript files. Both have the same effect and you can use whichever suits you best.

. Using the `@JavaScript` and `@HtmlImport` annotations.
+
*Example*: Importing HTML and JavaScript files into `HtmlComponent`.
+
[source,java]
----
@Tag("div")
@JavaScript("/js/script.js")
@HtmlImport("/html/htmlimport.html")
static class HtmlComponent extends Component implements HasText {
  // implementation omitted
}
----

* Both annotations are repeatable. Add one annotation for each file you need to add. 

. Using the `addHtmlImport(String url)` and `addJavaScript(String url)` methods from the `Page` class.
+
*Example*: Using the `addHtmlImport(String url)` and `addJavaScript(String url)` methods. to import HTML and JavaScript files. 
+
[source,java]
----
  private void addDependencies() {
    UI.getCurrent().getPage().addHtmlImport("/html/htmlimport.html");
    UI.getCurrent().getPage().addJavaScript("/js/script.js");
  }
----

== Storing JavaScript and HTML Files

// This content is repeated on the Including CSS page. Should we combine these pages?

You can place your JavaScript and HTML files in any folder in your WAR file, except `/VAADIN`, which is reserved for internal framework use.

`VaadinServlet` handles static resource requests if you have mapped it to `/*`.
If not, the servlet container takes care of static resource requests.


If you use relative URLs, it is irrelevant whether your application is deployed in the root context (for example  `\http://mysite.com/`) or in a sub context (for example `\http://mysite.com/myapp/`). Relative URLs are resolved using the page base URI, which is always set to match the servlet URL.

=== Using a Servlet Path

If you use a servlet path for the servlet, for example `\http://mysite.com/myapp/myservlet/`, you need to take the servlet path into account when including resources. This is because the base URI is `\http://mysite.com/myapp/myservlet/`, but static resources are deployed at `\http://mysite.com/myapp/`.

You can use the `context://` protocol, with the `Page.addStyleSheet` method, for example. This ensures the URL is relative to the context path, but is only supported when including resources.

When you configure an element, for example setting the `src` attribute for an `<img>`, you cannot use the `context://` protocol. Your options are:

* Cancel out the servlet path, for example `../images/logo.png`.
* Use an absolute URL, for example `/myapp/images/logo.png`
* Deploy your static resources in a directory that matches your servlet path, for example `/myservlet/`.
